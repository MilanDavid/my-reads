{"version":3,"sources":["BooksAPI.js","SingleBook.js","Search.js","MyReads.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SingleBook","props","react_default","a","createElement","className","imageLinks","style","width","height","backgroundImage","thumbnail","backgroundColor","onChange","event","changeShelf","target","value","defaultValue","disabled","title","authors","map","auth","Search","searchBooks","searchResult","react_router_dom","to","type","placeholder","length","key","src_SingleBook","MyReads","allBooks","filter","BooksApp","state","showSearchPage","getAllBooks","BooksAPI","_this","setState","trim","this","_this2","react_router","exact","path","render","src_MyReads","src_Search","React","Component","ReactDOM","src_App","document","getElementById"],"mappings":"2QAAMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACDA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAEpE,IAAMC,EAAU,CACZC,OAAU,mBACVC,cAAiBR,GAQRS,EAAS,kBAClBC,MAAK,GAAAC,OAAIZ,EAAJ,UAAiB,CAAEO,YACvBM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,SAEVC,EAAS,SAACC,EAAMC,GAAP,OAClBT,MAAK,GAAAC,OAAIZ,EAAJ,WAAAY,OAAiBO,EAAKE,IAAM,CAC7BC,OAAQ,MACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACDhB,EADA,CAEHkB,eAAgB,qBAEpBC,KAAMC,KAAKC,UAAU,CAAER,YAE1BP,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERc,EAAS,SAACC,GAAD,OAClBnB,MAAK,GAAAC,OAAIZ,EAAJ,WAAkB,CACnBsB,OAAQ,OACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACDhB,EADA,CAEHkB,eAAgB,qBAEpBC,KAAMC,KAAKC,UAAU,CAAEE,YAE1BjB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,gBCCRc,EA1CI,SAACC,GAEhB,OAAOC,EAAAC,EAAAC,cAAA,UACHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEPJ,EAAMb,KAAKkB,WACLJ,EAAAC,EAAAC,cAAA,OACEC,UAAU,aAAaE,MAAO,CAC1BC,MAAO,IACPC,OAAQ,IACRC,gBAAe,OAAA7B,OAASoB,EAAMb,KAAKkB,WAAWK,UAA/B,QAErBT,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVE,MAAO,CACHC,MAAO,IACPC,OAAQ,IACRG,gBAAiB,UAGjCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQS,SAAU,SAACC,GAAD,OAAWb,EAAMc,YAAYd,EAAMb,KAAM0B,EAAME,OAAOC,QAAQC,aAAa,QACzFhB,EAAAC,EAAAC,cAAA,UAAQa,MAAM,OAAOE,UAAQ,GAA7B,cACAjB,EAAAC,EAAAC,cAAA,UAAQa,MAAM,oBAAd,qBACAf,EAAAC,EAAAC,cAAA,UAAQa,MAAM,cAAd,gBACAf,EAAAC,EAAAC,cAAA,UAAQa,MAAM,QAAd,QACAf,EAAAC,EAAAC,cAAA,UAAQa,MAAM,QAAd,WAIZf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcJ,EAAMb,KAAKgC,OACxClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBJ,EAAMb,KAAKiC,SAAWpB,EAAMb,KAAKiC,QAAQC,IAAI,SAAAC,GAAI,OAAIA,QCIjFC,EAnCA,SAACvB,GAAU,IAGlBwB,EAGAxB,EAHAwB,YACAC,EAEAzB,EAFAyB,aACAX,EACAd,EADAc,YAGJ,OAAOb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,IAAIvB,UAAU,gBAAvB,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BASXH,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,OAAOC,YAAY,4BAA4BjB,SAAU,SAACC,GAAYW,EAAYX,EAAME,OAAOC,YAGnHf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAENqB,EAAaK,OAAS,GAAKL,EAAaJ,IAAI,SAAClC,EAAM4C,GAAP,OACxC9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAY7C,KAAMA,EAAM4C,IAAKA,EAAKjB,YAAaA,UC0BxDmB,EAtDC,SAACjC,GAAU,IAGnBkC,EAEAlC,EAFAkC,SACApB,EACAd,EADAc,YAGJ,OAAOb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,qBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAEN8B,EAASC,OAAO,SAAChD,GAAD,MAA0B,qBAAfA,EAAKC,OAAgCD,IAAOkC,IAAI,SAAClC,EAAM4C,GAAP,OACvE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAYD,IAAKA,EAAK5C,KAAMA,EAAM2B,YAAaA,SAMnEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAEN8B,EAASC,OAAO,SAAChD,GAAD,MAA0B,eAAfA,EAAKC,OAA0BD,IAAOkC,IAAI,SAAClC,EAAM4C,GAAP,OACjE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAYD,IAAKA,EAAK5C,KAAMA,EAAM2B,YAAaA,SAMnEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAEN8B,EAASC,OAAO,SAAChD,GAAD,MAA0B,SAAfA,EAAKC,OAAoBD,IAAOkC,IAAI,SAAClC,EAAM4C,GAAP,OAC3D9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAYD,IAAKA,EAAK5C,KAAMA,EAAM2B,YAAaA,oBCwBpEsB,6MA7DbC,MAAQ,CAONC,gBAAgB,EAChBJ,SAAU,GACVT,aAAc,MAOhBc,YAAc,WACZC,IACG3D,KAAK,SAAAC,GACJ2D,EAAKC,SAAS,CAAER,SAAUpD,SAIhCgC,YAAc,SAAC3B,EAAMC,GACfA,GACFoD,EAAgBrD,EAAMC,GACnBP,KAAK,SAAAC,GACJ2D,EAAKF,mBAKbf,YAAc,SAAC1B,GACTA,EAAMgC,OAAS,GACjBU,EAAgB1C,EAAM6C,QACnB9D,KAAK,SAAAC,GACAA,EAAIgD,OAAS,EACfW,EAAKC,SAAS,CAAEjB,aAAc3C,IAE9B2D,EAAKC,SAAS,CAAEjB,aAAc,2FA1BtCmB,KAAKL,+CAgCE,IAAAM,EAAAD,KACP,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAMhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAShB,SAAUW,EAAKR,MAAMH,SAAUpB,YAAa+B,EAAK/B,iBAC9Fb,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOE,KAAK,UAAUC,OAAQ,kBAAMhD,EAAAC,EAAAC,cAACgD,EAAD,CAAQ3B,YAAaqB,EAAKrB,YAAaC,aAAcoB,EAAKR,MAAMZ,aAAcX,YAAa+B,EAAK/B,iBAEpIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,WACP1B,EAAAC,EAAAC,cAAA,sCAtDWiD,IAAMC,iBCF7BC,IAASL,OAAOhD,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAAezB,EAAAC,EAAAC,cAACoD,EAAD,OAAyBC,SAASC,eAAe","file":"static/js/main.6e0de006.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n    token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n    'Accept': 'application/json',\r\n    'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n    fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n    fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n    fetch(`${api}/books/${book.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ shelf })\r\n    })\r\n    .then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n    fetch(`${api}/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ query })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => data.books)","import React from 'react'\r\nimport PropType from 'prop-types';\r\n\r\nconst SingleBook = (props) => {\r\n\r\n    return <li>\r\n        <div className=\"book\">\r\n            <div className=\"book-top\">\r\n                {\r\n                    props.book.imageLinks\r\n                        ? <div\r\n                            className=\"book-cover\" style={{\r\n                                width: 128,\r\n                                height: 193,\r\n                                backgroundImage: `url(${props.book.imageLinks.thumbnail})`\r\n                            }}></div>\r\n                        : <div\r\n                            className=\"book-cover\"\r\n                            style={{\r\n                                width: 128,\r\n                                height: 193,\r\n                                backgroundColor: 'gray'\r\n                            }}></div>\r\n                }\r\n                <div className=\"book-shelf-changer\">\r\n                    <select onChange={(event) => props.changeShelf(props.book, event.target.value)} defaultValue=\"move\">\r\n                        <option value=\"move\" disabled>Move to...</option>\r\n                        <option value=\"currentlyReading\">Currently Reading</option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"book-title\">{props.book.title}</div>\r\n            <div className=\"book-authors\">{props.book.authors && props.book.authors.map(auth => auth)}</div>\r\n        </div>\r\n    </li>\r\n}\r\n\r\nSingleBook.propTypes = {\r\n    book: PropType.object.isRequired,\r\n    changeShelf: PropType.func.isRequired\r\n}\r\n\r\nexport default SingleBook;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SingleBook from './SingleBook'\r\n\r\nconst Search = (props) => {\r\n\r\n    const {\r\n        searchBooks,\r\n        searchResult,\r\n        changeShelf\r\n    } = props;\r\n\r\n    return <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n            <Link to=\"/\" className=\"close-search\">Close</Link>\r\n            <div className=\"search-books-input-wrapper\">\r\n                {/*\r\n                    NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                    You can find these search terms here:\r\n                    https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                    However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                    you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input type=\"text\" placeholder=\"Search by title or author\" onChange={(event) => { searchBooks(event.target.value) }} />\r\n            </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n            <ol className=\"books-grid\">\r\n                {\r\n                    searchResult.length > 0 && searchResult.map((book, key) => (\r\n                        <SingleBook book={book} key={key} changeShelf={changeShelf} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\nimport SingleBook from './SingleBook'\r\n\r\nconst MyReads = (props) => {\r\n\r\n    const {\r\n        allBooks,\r\n        changeShelf\r\n    } = props;\r\n\r\n    return <div className=\"list-books\">\r\n        <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n        </div>\r\n        <div className=\"list-books-content\">\r\n            <div>\r\n                <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                        <ol className=\"books-grid\">\r\n                            {\r\n                                allBooks.filter((book) => (book.shelf === \"currentlyReading\" && book)).map((book, key) => (\r\n                                    <SingleBook key={key} book={book} changeShelf={changeShelf} />\r\n                                ))\r\n                            }\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                        <ol className=\"books-grid\">\r\n                            {\r\n                                allBooks.filter((book) => (book.shelf === \"wantToRead\" && book)).map((book, key) => (\r\n                                    <SingleBook key={key} book={book} changeShelf={changeShelf} />\r\n                                ))\r\n                            }\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">Read</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                        <ol className=\"books-grid\">\r\n                            {\r\n                                allBooks.filter((book) => (book.shelf === \"read\" && book)).map((book, key) => (\r\n                                    <SingleBook key={key} book={book} changeShelf={changeShelf} />\r\n                                ))\r\n                            }\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default MyReads;","import React from 'react'\r\n// import * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport Search from './Search'\r\nimport MyReads from './MyReads'\r\nimport { Route, Link } from 'react-router-dom'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    /**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     */\r\n    showSearchPage: false,\r\n    allBooks: [],\r\n    searchResult: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllBooks();\r\n  }\r\n\r\n  getAllBooks = () => {\r\n    BooksAPI.getAll()\r\n      .then(res => {\r\n        this.setState({ allBooks: res });\r\n      })\r\n  }\r\n\r\n  changeShelf = (book, shelf) => {\r\n    if (shelf) {\r\n      BooksAPI.update(book, shelf)\r\n        .then(res => {\r\n          this.getAllBooks();\r\n        })\r\n    }\r\n  }\r\n\r\n  searchBooks = (query) => {\r\n    if (query.length > 0) {\r\n      BooksAPI.search(query.trim())\r\n        .then(res => {\r\n          if (res.length > 0) {\r\n            this.setState({ searchResult: res })\r\n          } else {\r\n            this.setState({ searchResult: [] })\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path=\"/\" render={() => <MyReads allBooks={this.state.allBooks} changeShelf={this.changeShelf} />} />\r\n        <Route path=\"/search\" render={() => <Search searchBooks={this.searchBooks} searchResult={this.state.searchResult} changeShelf={this.changeShelf} />} />\r\n\r\n        <div className=\"open-search\">\r\n          <Link to=\"/search\">\r\n            <button>Add a book</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}